Still warming up, part 1 should be O(nm) where n is the number of items in the
input list and m is the number of characters per string. Iterate through each
string keeping a count of the number of times we've encounter each character.

If we have a pair of letters that occur two or three times, record the
appropriate (Boolean, Boolea) tuple. We then count the number of trues for each
side of the tuple and multiply together.

Part 2 we need to check every combination of pairs. There might be a better way
of doing this using trees, but I'm a little pressed for time. As it
is, O(mn^2) will suffice.

Anyway, get every combination of two elements in the list, and compare the two
strings character by character. We are looking for the combination that does not
have 2 or more differences.

Once this is found it's just a matter of filtering for the characters that are
equal.

Another solution would be to get the list of characters that are equivalent
between every pair, and find the common character list with
length == pairLength - 1
